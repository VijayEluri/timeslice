#! /bin/ksh
#
#

set -e

SVCVERSION="${pom.version}"
WEBVERSION="${pom.version}"

WEBROOT="timeslice-web-${WEBVERSION}"

WEBROOTARCH="$WEBROOT-static-web-root.zip"

ROOT="var/lib/webroot/$WEBROOT"
PORT=""
# $(($((12000 + $(($RANDOM % 10000))))))
UPGRADEARG="/dev/null"
UPDATEURL="http://timeslice.googlecode.com/svn/wiki/LatestRelease.wiki"

#----------------------------------------------------------
# Check command-line switches


while getopts p:U arg
do
	case "$arg" in
		p) PORT="$OPTARG";;
		U) UPGRADEARG="--preload";;
	esac
done
shift $(($OPTIND - 1))


#----------------------------------------------------------
# Re-create web root folder from distribution

cd var/lib/webroot

# TODO: check and avoid cases like "/"
if [ -d "$WEBROOT" ]
then
	rm -rf "$WEBROOT"
fi

unzip -q "$WEBROOTARCH"

cd -


#----------------------------------------------------------
# create ACL

restoreecho()
{
	stty echo
}

trap restoreecho EXIT

ACLFILE="$HOME/.timeslice.acl"

if [ ! -r "$ACLFILE" ]
then
	if [ -z "$PORT" ]
	then
		printf "  You must specify -p <port> if running for the 1st time.\n"
		exit 1
	fi

	printf "Create a user:\n"
	printf "  username: "
	read username
	printf "  password: "
	stty -echo
	read password
	stty echo
	printf "\n"

	printf "Do you need an HTTP proxy ? "
	read ans
	case "$ans" in
		[Yy])
			printf "  proxy host       (proxhost.mydomain.com)   : "
			read HTTP_PROXY_HOST
			printf "  proxy port       (88)                      : "
			read HTTP_PROXY_PORT
			printf "  proxy exceptions (*.mydomain.com)          : "
			read HTTP_PROXY_EXCEPT
		;;
	esac
	
	printf "%s:%s\n" "$username" "$password" >> "$ACLFILE"
	chmod go-rwx "$ACLFILE"
else
	printf "Found existing ACL file.\n";
fi


#----------------------------------------------------------
# create RC file

RCFILE="$HOME/.timeslicerc"

if [ ! -r "$RCFILE" ]
then
	printf "Creating rc file ...\n"

	# Wherever this was unzipped,
	# we should be able to unzip another one.
	safedir="$( (cd "$(dirname $0)/../.." && pwd) )"

	cat << EOF > "$RCFILE"

# generated by $0

timeslice.port = $PORT
timeslice.acl = $ACLFILE
timeslice.safedir = $safedir
timeslice.update-url = $UPDATEURL

EOF

	[ "$HTTP_PROXY_HOST" ] && printf "http.proxyHost = %s\n" "$HTTP_PROXY_HOST" >> "$RCFILE"
	[ "$HTTP_PROXY_PORT" ] && printf "http.proxyPort = %s\n" "$HTTP_PROXY_PORT" >> "$RCFILE"
	[ "$HTTP_PROXY_EXCEPT" ] && printf "http.nonProxyHosts = %s\n" "$HTTP_PROXY_EXCEPT" >> "$RCFILE"

	printf "\n" >> "$RCFILE"

else
	printf "Found existing RC file.\n";
fi


#----------------------------------------------------------
# Run web service

PORTARG=""
if [ -n "$PORT" ]
then
	PORTARG="--port $PORT"
fi

set +e

java \
	-jar lib/timeslice-svc-${SVCVERSION}-jar-with-dependencies.jar \
	bacond.timeslicer.app.restlet.svc.Driver \
		--root "$ROOT" \
		--acl "$ACLFILE" \
		$PORTARG \
		$UPGRADEARG

# support relaunching a new version
if [ $? -eq 42 ]
then
	printf "Relaunching ...\n"
	cd "$(cat "$HOME/.timeslice.nextroot")"
	rm "$HOME/.timeslice.nextroot"

	exec sh bin/runme.sh -U
fi
